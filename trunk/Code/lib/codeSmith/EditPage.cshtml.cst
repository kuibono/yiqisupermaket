<%-- 
Name: 编辑页面
Description: 编辑页面
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Debug="False" Description="生成数据库实体" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="属性" Description="要生成实体的数据表" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
@model YiQiWorkFlow.Domain.<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>.<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title><%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑</title>
    <link type="text/css" rel="Stylesheet" href="/Styles/editPage.css" />
    <script type="text/javascript" src="/scripts/boot.js"></script>
    <script type="text/javascript" src="/Scripts/editPage.js"></script>
    <script type="text/javascript"> var pageTitle = "<%= StringUtil.ToPascalCase(this.SourceTable.Description) %>"; var formChanged = false; var pageType = "Edit"; var createTime = "<%=DateTime.Now%>";var id="@Model.Id";pageName="<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>Edit"; </script>
	<script type="text/javascript">
        function SaveData() {
            var form = new mini.Form("#formMain"); // default form
            var o = form.getData();
            $.ajax({
                url: "/<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>/Save<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>",
                type: 'post',
                data: o,
                cache: false,
				dataType:"json",
                success: function (r) {
                    if (r.IsSuccess == true) {
                        closeWithNoValidate();
                    } else {
                        $("#Tooltip_Critical_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %> .content").first().text(r.Message);
                        $("#Tooltip_Critical_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>").show("fast");
                        form.unmask();
                        $(document).scrollTop(0);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $("#Tooltip_Critical_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %> .content").first().text(jqXHR.responseText);
                    $("#Tooltip_Critical_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>").show("fast");
                    form.unmask();
					$(document).scrollTop(0);
                }
            });
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>
            <%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑
        </h1>
        <div class="tooltip warning hidden" id="Tooltip_Warning_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>">
            <img src="/images/Warning.png" alt="Warning" height="48" width="48" />
			<p class="content">
            	此处填写关于<%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑页面的警告信息
			</p>
            <div class="button-close">
                x</div>
            <div class="buttonGroup">
                <input type="button" class="myYellowButton buttonNoMoreShow" value="不再显示" />
                <input type="button" class="myYellowButton buttonClose" value="关闭" />
            </div>
        </div>
        <div class="tooltip info hidden" id="Tooltip_Info_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>">
            <img src="/images/Info.png" alt="Warning" height="48" width="48" />
			<p class="content">
            	此处填写关于<%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑页面的提示信息
			</p>
            <div class="button-close">
                x</div>
            <div class="buttonGroup">
                <input type="button" class="myYellowButton buttonNoMoreShow" value="不再显示" />
                <input type="button" class="myYellowButton buttonClose" value="关闭" />
            </div>
        </div>
        <div class="tooltip help hidden" id="Tooltip_Help_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>">
            <img src="/images/Help.png" alt="Warning" height="48" width="48" />
			<p class="content">
            	此处填写关于<%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑页面的帮助信息
			</p>
            <div class="button-close">
                x</div>
            <div class="buttonGroup">
                <input type="button" class="myYellowButton buttonNoMoreShow" value="不再显示" />
                <input type="button" class="myYellowButton buttonClose" value="关闭" />
            </div>
        </div>
        <div class="tooltip critical hidden" id="Tooltip_Critical_<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>">
            <img src="/images/critical.png" alt="Warning" height="48" width="48" />
			<p class="content">
            此处填写关于<%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑页面的出错信息
			</p>
            <div class="button-close">
                x</div>
            <div class="buttonGroup">
                <input type="button" class="myYellowButton buttonNoMoreShow" value="不再显示" />
                <input type="button" class="myYellowButton buttonClose" value="关闭" />
            </div>
        </div>
        <form id="formMain" method="post" action="">
        <fieldset>
            <legend>基本信息</legend>
            <% foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
            <%= GetTableColumnResult(column) %>
            <% } %>
           
        </fieldset>
        <div class="clear">
        </div>
        <div class="control-panel">
            <div class="control-button">
                <input type="button" class="myButton" id="btnFormSubmit" value="保存(Ctrl+S)" />
                <input type="reset" class="myGrayButton" id="btnFormReset" value="重置(Esc)" />
                <input type="button" class="myRedButton" id="btnClosePage" value="关闭(Ctrl+Q)" />
            </div>
            <div class="botton-up">
            </div>
        </div>
        </form>
    </div>
</body>
</html>

<script runat="template">
private string GetTableColumnResult(ColumnSchema column)
{
    StringBuilder sb=new StringBuilder();
    if(IsIdentityOrPkColumn(column))
    {
        sb.AppendLine("<div class=\"ablock\" style=\"display:none\">");
        sb.AppendFormat("                <label for=\"Control_{0}\">{1}:</label>\n                ",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r'));
    }
    else
    {
        sb.AppendLine("<div class=\"ablock\">");
        sb.AppendFormat("                <label for=\"Control_{0}\">{1}:</label>\n                ",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r'));
    }
    if(IsIdentityOrPkColumn(column))
    {
        sb.AppendFormat("<input id=\"Control_{0}\" value=\"@Model.Id\" name=\"Id\" class=\"mini-hidden\"/>",StringUtil.ToPascalCase(column.Name));
    }
    else if(column.IsForeignKeyMember)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" value=\"@Model.{0}\" name=\"{0}\" class=\"mini-combobox\" textField=\"text\" valueField=\"id\" emptyText=\"请选择...\"  url=\"../Category/GetDropItems?table=&namecolumn=&idcolumn=\" required=\"{1}\" allowInput=\"true\" showNullItem=\"true\" nullItemText=\"请选择...\"/>",StringUtil.ToPascalCase(column.Name),(column.AllowDBNull==false).ToString().ToLower());
    }
    else if(column.DataType==DbType.String||column.DataType==DbType.AnsiString)
    {
        if(column.Name.ToLower().StartsWith("if_"))
        {
            sb.AppendFormat("<div id=\"Control_{0}\" name=\"{0}\" value=\"1\" class=\"mini-checkbox\" checked=\"true\" readOnly=\"false\" text=\"{1}\"></div>",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r').Replace("是否",""));
        }
        else
        {
            sb.Append("<input type=\"text\"  value=\"@Model."+StringUtil.ToPascalCase(column.Name)+"\" class=\"mini-textbox\" name=\""+StringUtil.ToPascalCase(column.Name)+"\" id=\"Control_"+StringUtil.ToPascalCase(column.Name)+"\" ");
            if(column.Size>-1)
            {
                sb.Append("vtype=\"maxLength:"+ column.Size +"\"");
            }
            if(column.AllowDBNull==false)
            {
                sb.Append("required=\"true\"");   
            }
            
            sb.Append(" />");
        }
    }
    else if(column.DataType==DbType.Boolean)
    {
        sb.AppendFormat("<div id=\"Control_{0}\" name=\"{0}\" class=\"mini-checkbox\" checked=\"true\" readOnly=\"false\" text=\"{1}\"></div>",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r'));
    }  
    else if(column.DataType==DbType.DateTime || column.DataType==DbType.DateTime2)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" name=\"{0}\"  value=\"@Model.{0}\" class=\"mini-datepicker\"  format=\"yyyy-MM-dd H:mm:ss\" timeFormat=\"H:mm:ss\" showTime=\"true\" showOkButton=\"true\" showClearButton=\"true\" required=\"{1}\" />",StringUtil.ToPascalCase(column.Name),(column.AllowDBNull==false).ToString().ToLower());
    }
    else if(column.DataType==DbType.Int16 || column.DataType==DbType.Int32||column.DataType==DbType.Int64)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" name=\"{0}\"  value=\"@Model.{0}\" class=\"mini-spinner\" minValue=\"0\" maxValue=\"1000\" decimalPlaces=\"0\"/>",StringUtil.ToPascalCase(column.Name));
    }
    else if(column.DataType==DbType.Decimal)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" name=\"{0}\"  value=\"@Model.{0}\" class=\"mini-spinner\" minValue=\"0\" maxValue=\"1000\" decimalPlaces=\"{1}\"/>",StringUtil.ToPascalCase(column.Name),column.Scale);
    }
    else
    {
        sb.Append("ERROR TYPE:"+column.DataType);
    }
    sb.AppendLine("\n            </div>");
    return sb.ToString();
}
private string _savefile;
[Editor(typeof(FileNameEditor),typeof(System.Drawing.Design.UITypeEditor)),FileDialogAttribute(FileDialogType.Save,Title="save as",Filter="C# File|(*.cs)")]
public string SaveFile
{
   get
   {
    return _savefile;
   }
   set
   {
    _savefile = value;
   }
}
public override void Render(TextWriter tw)
{
   StreamWriter fs1 = new StreamWriter(_savefile,true);
   this.Response.AddTextWriter(fs1);
   base.Render(tw);
   fs1.Close();
}
public bool TableHasIdentityColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if((bool)column.ExtendedProperties["CS_IsIdentity"].Value==true)
		{
			return true;
		}
	}
	return false;
}
public ColumnSchema GetTableIdentityColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		try
		{
			if((bool)column.ExtendedProperties["CS_IsIdentity"].Value==true)
			{
				return column;
			}
		}
		catch{}
	}
	throw new Exception("no IdentityColumn");
}
public bool TableExistPk(SchemaExplorer.TableSchema table)
{
	return table.HasPrimaryKey;
}
public ColumnSchema GetTablePkColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if(column.IsPrimaryKeyMember)
		{
			return column;
		}
	}
	return null;
}
public ColumnSchema GetPkOrIdentityColumn(SchemaExplorer.TableSchema table)
{
	if(TableExistPk(table))
	{
		return GetTablePkColumn(table);
	}
	if(TableHasIdentityColumn(table))
	{
		return GetTableIdentityColumn(table);
	}
	throw new Exception("No Pk");
}
public bool IsIdentityOrPkColumn(ColumnSchema column)
{
	return (bool)column.ExtendedProperties["CS_IsIdentity"].Value==true || column.IsPrimaryKeyMember;
}
</script>
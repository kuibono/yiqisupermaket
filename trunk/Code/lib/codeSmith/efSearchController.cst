<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Register Name="Model" Template="Service.cs.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="IService" Template="IService.cs.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Default="" Optional="False" Category=""%>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.IO" %>
            c.entity = s;
            using (YiQiEntities e = new YiQiEntities())
            {

                var q = from l in e.<%=SourceTable.Name%>
                        orderby l.<%=GetPkOrIdentityColumn(SourceTable).Name%>
                        select new
                                   {
                                    <%
                                    int index=0;
                                    foreach (ColumnSchema column in SourceTable.Columns)
                                    {
                                    %>
                                    <%=StringUtil.ToPascalCase(column.Name)%>=l.<%=column.Name%><%=(index==SourceTable.Columns.Count-1)?"":","%>
                                    <%
                                    index++;
                                    }
                                    %>

                                   };
                <%
                foreach (ColumnSchema column in SourceTable.Columns){
                    if(column.DataType==DbType.String||column.DataType==DbType.AnsiString){
                        %>
                if (c.entity.<%=StringUtil.ToPascalCase(column.Name)%>.IsNullOrEmpty() == false)
                {
                    q = from l in q where l.<%=StringUtil.ToPascalCase(column.Name)%>.StartsWith(c.entity.<%=StringUtil.ToPascalCase(column.Name)%>) select l;
                }
                        <%
                    }
                }
                %>
                
                <%=GenerateIfHaveColumn(SourceTable,"OperatorDate")%>
                <%=GenerateIfHaveColumn(SourceTable,"ExamineDate")%>
                <%=GenerateIfHaveColumn(SourceTable,"CreateDate")%>
                <%=GenerateIfHaveColumn(SourceTable,"PutinDate")%>
                <%=GenerateIfHaveColumn(SourceTable,"CheckDate")%>
                <%=GenerateIfHaveColumn(SourceTable,"PurchaseDate")%>
                <%=GenerateIfHaveColumn(SourceTable,"RtDate")%>

                var result =
                    new { total = q.Count(), data = q.Skip(c.pageSize * (c.pageIndex - 1)).Take(c.pageSize).ToList() };

                return Json(result, JsonRequestBehavior.AllowGet);
                


<script runat="template">
public bool TableHasColumn(SchemaExplorer.TableSchema table,string colName)
{
    foreach (ColumnSchema column in table.Columns){
        if(colName.ToLower()==column.Name.ToLower() || StringUtil.ToPascalCase(column.Name).ToLower()==colName.ToLower()){
            return true;
        }
    }
    return false;
}
public string GenarateTimeQueryExp(string columnName)
{
    //return columnName;
    return string.Format("\n                if(c.{0}H.HasValue)\n                {{\n                    q = from l in q where l.{0}<=c.{0}H select l;\n                }}\n                if(c.OperatorDateL.HasValue)\n                {{\n                    q = from l in q where l.{0} >= c.{0}L select l;\n                }}\n    ",columnName);
}
public string GenerateIfHaveColumn(SchemaExplorer.TableSchema table,string colName)
{
    if(TableHasColumn(table,colName))
    {
        return GenarateTimeQueryExp(colName);
    }
    return "";
}    
  public bool TableHasIdentityColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if((bool)column.ExtendedProperties["CS_IsIdentity"].Value==true)
		{
			return true;
		}
	}
	return false;
}
public ColumnSchema GetTableIdentityColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		try
		{
			if((bool)column.ExtendedProperties["CS_IsIdentity"].Value==true)
			{
				return column;
			}
		}
		catch{}
	}
	throw new Exception("no IdentityColumn");
}
public bool TableExistPk(SchemaExplorer.TableSchema table)
{
	return table.HasPrimaryKey;
}
public ColumnSchema GetTablePkColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if(column.IsPrimaryKeyMember)
		{
			return column;
		}
	}
	return null;
}
public ColumnSchema GetPkOrIdentityColumn(SchemaExplorer.TableSchema table)
{
	if(TableExistPk(table))
	{
		return GetTablePkColumn(table);
	}
	if(TableHasIdentityColumn(table))
	{
		return GetTableIdentityColumn(table);
	}
	throw new Exception("No Pk");
}
public bool IsIdentityOrPkColumn(ColumnSchema column)
{
	return (bool)column.ExtendedProperties["CS_IsIdentity"].Value==true || column.IsPrimaryKeyMember;
}
  
</script>
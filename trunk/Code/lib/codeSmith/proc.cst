<%-- 
Name:
Author: 
Description: 
--%>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" CompilerVersion="v3.5" Description="Template description here." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="Database that the documentation should be based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
public class Command
    {

        private static string ConnectionString = "data source=.;initial catalog=YiQi;persist security info=True;user id=sa;password=Admin@123;";

<%
foreach(var proc in SourceDatabase.Commands)
{
    var parameters = proc.InputParameters;
    
%>
        public static <%=StringUtil.ToPascalCase(proc.Name)%>Result <%=StringUtil.ToPascalCase(proc.Name)%> (<% for (int i = 0; i < parameters.Count; i++) { %><%=CSharpAlias[parameters[i].SystemType.FullName]%> <%=StringUtil.ToPascalCase(parameters[i].Name)%><% if(i!=parameters.Count-1){%>,<%}  }%>string p1, string p2)
        {
            SqlConnection con = new SqlConnection(ConnectionString);
            con.Open();
            SqlCommand com = new SqlCommand("<%=proc.Name%>", con);
            com.CommandType = CommandType.StoredProcedure;
            
            <%
            for (int i = 0; i < parameters.Count; i++) {
            %>
            SqlParameter par = new SqlParameter("<%=parameters[i].Name%>", <%=StringUtil.ToPascalCase(parameters[i].Name)%>);
            com.Parameters.Add(par);
            <%}%>

            SqlDataReader reader = com.ExecuteReader();
            if (reader.Read())
            {
                <%=StringUtil.ToPascalCase(proc.Name)%>Result r = new <%=StringUtil.ToPascalCase(proc.Name)%>Result();
                <%
                    int index=0;
                    foreach(SchemaExplorer.CommandResultSchema r in proc.CommandResults)
                    {
                        foreach(SchemaExplorer.CommandResultColumnSchema c in r.Columns)
                        {
                %>
                r.<%=StringUtil.ToPascalCase(c.Name)%> = reader[<%=index%>].ToString();
                <%
                        index++;
                        }
                    }
                %>
                con.Close();
                con.Dispose();
                return r;
            }
            con.Close();
            con.Dispose();
            return new TestResult();

        }
<%
}
%>
<%
foreach(var proc in SourceDatabase.Commands)
{
%>
    public class <%=StringUtil.ToPascalCase(proc.Name)%>Result
    {
        <%
        foreach(SchemaExplorer.CommandResultSchema r in proc.CommandResults)
        {
            foreach(SchemaExplorer.CommandResultColumnSchema c in r.Columns)
            {
                %>
                public <%= CSharpAlias[c.SystemType.FullName] %> <%=StringUtil.ToPascalCase(c.Name)%> { get; set; }
                <%
            }
        }
        %>
    }

<%
}
%>


}
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>
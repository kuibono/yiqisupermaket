<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" ResponseEncoding="UTF-8"  Debug="True" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="表" Description="主表" %>
<%@ Property Name="SubTable" Type="SchemaExplorer.TableSchema" Category="表" Description="字表" %>
<%@ Property Name="OutKey" Type="System.String" Category="表" Description="外键" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
@model YiQiWorkFlow.Domain.<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>.<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title><%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑</title>
    <link type="text/css" rel="Stylesheet" href="/Styles/editPage.css" />
    <script type="text/javascript" src="/scripts/boot.js"></script>
    <script type="text/javascript" src="/Scripts/editPage.js"></script>
    <script type="text/javascript"> var pageTitle = "<%= StringUtil.ToPascalCase(this.SourceTable.Description) %>"; var formChanged = false; var pageType = "Edit"; var createTime = "2014/2/15 19:58:54"; var id = "@Model.Id"; pageName = "<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>Edit";var isNew=@Model.IsAdded.ToString().ToLower();var userId="@YiQiWorkFlow.Web.Client.Common.MyEnv.LoginUser.Id";  </script>
    <script type="text/javascript">
        function SaveData() {
            var form = new mini.Form("#formMain"); // default form
            var o = form.getData();

            var grid1 = mini.get("datagrid1");
            grid1.commitEdit();
            var detail = grid1.getChanges();
            //验证子表
            if (detail.length == 0) {
                alert("必须设置<%=SubTable.Description.Trim('\r').Trim('\n') %>！");
                return false;
            }
            for (var i = 0; i < detail.length; i++) {
                <%
                foreach(ColumnSchema col in this.SubTable.Columns){
                %>
                if (detail[i].<%=StringUtil.ToPascalCase(col.Name)%> == undefined || detail[i].<%=StringUtil.ToPascalCase(col.Name)%> == 0) {
                    alert("<%=col.Description.Trim('\r').Trim('\n')%>不能为空或者0！");
                    return false;
                }
                <%
                }
                %>
            }
            
            o["detail"] = mini.encode(detail);

            $.ajax({
                url: "/<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>/Save<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>",
                type: 'post',
                data: o,
                cache: false,
                dataType: "json",
                success: function (r) {
                    if (r.IsSuccess == true) {
                        //location.href = "/<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>/<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>List";
						try{ history.go(-1); } catch(e){}
                    } else {
                        $("#Tooltip_Critical_PcPurchaseManage .content").first().text(r.Message);
                        $("#Tooltip_Critical_PcPurchaseManage").show("fast");
                        form.unmask();
                        $(document).scrollTop(0);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $("#Tooltip_Critical_PcPurchaseManage .content").first().text(jqXHR.responseText);
                    $("#Tooltip_Critical_PcPurchaseManage").show("fast");
                    form.unmask();
                    $(document).scrollTop(0);
                }
            });
        }

        function onGoodsChanged(e) {
            

        }
        function addRow(row) {
            var grid = mini.get("datagrid1");
            grid.addRow(row, 0);

        }
        function onrowdblclick(e) {
            var grid = mini.get("datagrid1");
            if (grid.isEditing()) {
                grid.commitEdit();
            }
            grid.beginEditRow(e.row);
            setTimeout(function () {
            //    mini.getbyName("GoodsCode", "datagrid1").focus();
            }, 500);

        }
		function ExameData() {
			 var chk = mini.get("Control_IfExamine");
                chk.setValue("1");
                mini.get("Control_ExamineDate").setValue(new Date());
				mini.get("Control_Assessor").setValue(userId);
                clearExameAfterSave = false;
                if (isNew == false) {
                    //立即生效
                    $.getJSON("/Common/ChangeDbValue?table=<%=SourceTable.Name%>&pkColumn=<%=GetPkOrIdentityColumn(SourceTable).Name%>&pkValue=@Model.Id&assessor=&if_examine=1&examine_date=" + new Date(), function (r) {

                    });
                }
                $("#btnExame").prop("disabled", true);
		}
        $(function () {
            var grid = mini.get("datagrid1");
            grid.reload();
            jQuery.hotkeys.add('return', function () {
                //if (mini.get("filter_SupCode").getValue().length == 0) {
                //    alert("必须选择供货商");
                //    return false;
                //}
                if (grid.isEditing()) {
                    grid.commitEdit();
                }
                var row = {};
                grid.addRow(row, 0);
                grid.cancelEdit();
                grid.beginEditRow(row);
                //mini.getbyName("GoodsCode", "datagrid1").setUrl("/Fb/SearchFbGoodsArchivesListForList?SupCode=" + mini.get("filter_SupCode").getValue());
                setTimeout(function () {
                //    mini.getbyName("GoodsCode", "datagrid1").focus();
                }, 500);
            });
            jQuery.hotkeys.add('esc', function () {
                grid.reload();
            });
            jQuery.hotkeys.add('del', function () {
                grid.removeRows(grid.getSelecteds());
            });

            //$("#btnExame").click(function () {
            //    var chk = mini.get("Control_IfExamine");
            //    chk.setValue("1");
            //    mini.get("Control_ExamineDate").setValue(new Date());
            //    clearExameAfterSave = false;
            //    if (isNew == false) {
            //       //立即生效
            //        $.getJSON("/Common/ChangeDbValue?table=<%=SourceTable.Name%>&pkColumn=<%=GetPkOrIdentityColumn(SourceTable).Name%>&pkValue=@Model.Id&assessor=&if_examine=1&examine_date=" + new Date(), function (r) {
			//
            //        });
            //    }
            //    $("#btnExame").prop("disabled", true);
            //});
            if ("@Model.IfExamine" == "1") {
                $("#btnExame").prop("disabled", true);
            }
            $("#btnInStock").click(function () {
                mini.get("Control_IfPutin").setValue("1");
                mini.get("Control_PutinDate").setValue(new Date());
            });
            $("#btnDel").click(function () {
                if (isNew == false) {
                    //删除
                    $.ajax({
                        url: "/<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>/<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>Delete",
                        data: { ids: id, confirm: "true" },
                        dataType: "json",
                        success: function (r) {
                            closeWithNoValidate();
                        }
                    });
                }
                else {
                    closeWithNoValidate();
                }
            });
            $("#btnGoods").click(function () {
                var btnEdit = this;
                //if (mini.get("filter_SupCode").getValue().length == 0) {
                //    alert("必须选择供货商");
                //    return false;
                //}
                mini.open({
                    url: "/Common/GoodsSelector?OpCode=3",
                    title: "选择商品",
                    width: 600,
                    height: 380,
                    ondestroy: function (action) {
                        //if (action == "close") return false;
                        if (action == "ok") {
                            var iframe = this.getIFrameEl();
                            var data = iframe.contentWindow.GetData();
                            data = mini.clone(data);    //
                            if (data) {
                                for (var i = 0; i < data.length; i++) {
                                    var row = {
                                        GoodsCode: data[i].Id,
                                        GoodsBarCode: data[i].GoodsBarCode,
                                        Specification: data[i].Specification,
                                        PackUnitCode: data[i].PackUnitCode,
                                        OfferMin: data[i].OfferMin,
                                        StockQty: data[i].StockQty,
                                        OrderQty: data[i].OrderQty,
                                        PackQty: data[i].PackQty,
                                        PackCoef: data[i].PackCoef,
                                        PurchaseQty: data[i].PurchaseQty,
                                        PutinQty: data[i].PutinQty,
                                        SalePrice: data[i].SalePrice,
                                        PurchasePrice: data[i].PurchasePrice,
                                        NontaxPurchasePrice: data[i].NontaxPurchasePrice,
                                        PurchaseMoney: data[i].PurchaseMoney,
                                        NontaxPurchaseMoney: data[i].NontaxPurchaseMoney,
                                        ProduceDate: data[i].ProduceDate
                                    };
                                    addRow(row);
                                }
                            }
                        }

                    }
                });
            });
            $("#btnQuery").click(function () {
                location.href = "/<%= StringUtil.ToPascalCase(this.SourceTable.Name.Split('_')[0]) %>/<%= StringUtil.ToPascalCase(this.SourceTable.Name) %>List";
            });
        });
    </script>
</head>
<body>
    <div class="container">
        <div id="toolbar1" class="mini-toolbar" style="padding: 2px;">
            <table style="width: 100%;">
                <tr>
                    <td>
                        <a id="btnFormSubmit" iconcls="icon-save" class="mini-button" plain="true" tooltip="保存(Ctrl+S)">保存</a>
                        <a id="btnGoods" iconcls="icon-find" class="mini-button" plain="true" tooltip="商品">商品</a>
                        <a id="btnInStock" iconcls="icon-upload" class="mini-button" plain="true" tooltip="入库">入库</a>
                        <a id="btnExame" iconcls="icon-ok" class="mini-button" plain="true" tooltip="审核(Ctrl+E)">审核</a>
                        <a id="btnQuery" iconcls="icon-search" class="mini-button" plain="true" tooltip="查询">查询</a>
                        <a id="btnSubmit" iconcls="icon-upgrade" class="mini-button" plain="true" tooltip="提交">提交</a>
                        <a id="btnPrint" iconcls="icon-printer" class="mini-button" plain="true" tooltip="打印">打印</a>
                        <a id="btnFormReset" iconcls="icon-undo" class="mini-button" plain="true" tooltip="重置(Esc)">重置</a>
                        <a id="btnClosePage" iconcls="icon-no" class="mini-button" plain="true" tooltip="关闭(Ctrl+Q)">关闭</a>
                    </td>
                    <td>
                    </td>
                </tr>
            </table>
        </div>
        <form id="formMain" method="post" action="">
            <fieldset>
                <legend><%= StringUtil.ToPascalCase(this.SourceTable.Description) %>编辑</legend>
                <% foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
            	<%= GetTableColumnResult(column) %>
           		<% } %>
            </fieldset>

            <div id="datagrid1" class="mini-datagrid" url="/<%= StringUtil.ToPascalCase(this.SubTable.Name.Split('_')[0]) %>/Search<%= StringUtil.ToPascalCase(this.SubTable.Name) %>List?<%=this.OutKey%>=@(string.IsNullOrEmpty(Model.Id) ? "!##$%" : Model.Id)"
                style="width: 100%; height: 250px; margin-top:10px;" idfield="id" allowresize="false" sizelist="[20,30,50,100]"
                pagesize="20" multiselect="true" showfilterrow="false" showPager="false" onrowdblclick="onrowdblclick">
                <div property="columns">
                    <div type="indexcolumn" width="30">
                    </div>
                    <div type="checkcolumn" width="30">
                    </div>
                    <%
					foreach(ColumnSchema col in this.SubTable.Columns)
					{
					%>
					<%=GetGridColumn(col)%>
					<%
					}
					%>
                </div>
            </div>
            <div class="clear">
            </div>
            @*<div class="control-panel">
                <div class="control-button">
                    <input type="button" class="myButton" id="btnFormSubmit" value="保存(Ctrl+S)" />
                    <input type="button" class="myButton" id="btnGoods" value="商品" />
                    <input type="button" class="myButton" id="btnInStock" value="入库" />
                    <input type="button" class="myButton" id="btnExame" value="审核(Ctrl+E)" />
                    <input type="button" class="myButton" id="btnQuery" value="查询" />
                    <input type="button" class="myButton" id="btnSubmit" value="提交" />
                    <input type="button" class="myButton" id="btnPrint" value="打印" />
                    <input type="reset" class="myGrayButton" id="btnFormReset" value="重置(Esc)" />
                    <input type="button" class="myRedButton" id="btnClosePage" value="关闭(Ctrl+Q)" />
                </div>
                <div class="botton-up">
                </div>
            </div>
			*@
        </form>
    </div>
</body>
</html>
<!--
<%
foreach(ColumnSchema col in this.SubTable.Columns){
%>
<%=StringUtil.ToPascalCase(col.Name)%>:j.data[i].<%=StringUtil.ToPascalCase(col.Name)%>,
<%
}
%>
-->
<script runat="template">
private string GetTableColumnResult(ColumnSchema column)
{
    StringBuilder sb=new StringBuilder();
    if(IsIdentityOrPkColumn(column))
    {
        sb.AppendLine("<div class=\"ablock\" style=\"display:none\">");
        sb.AppendFormat("                <label for=\"Control_{0}\">{1}:</label>\n                ",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r'));
    }
    else
    {
        sb.AppendLine("<div class=\"ablock\">");
        sb.AppendFormat("                <label for=\"Control_{0}\">{1}:</label>\n                ",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r'));
    }
    if(IsIdentityOrPkColumn(column))
    {
        sb.AppendFormat("<input id=\"Control_{0}\" value=\"@Model.Id\" name=\"Id\" class=\"mini-hidden\"/>",StringUtil.ToPascalCase(column.Name));
    }
    else if(column.IsForeignKeyMember)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" value=\"@Model.{0}\" name=\"{0}\" class=\"mini-combobox\" textField=\"text\" valueField=\"id\" emptyText=\"???...\"  url=\"../Category/GetDropItems?table=&namecolumn=&idcolumn=\" required=\"{1}\" allowInput=\"true\" showNullItem=\"true\" nullItemText=\"???...\"/>",StringUtil.ToPascalCase(column.Name),(column.AllowDBNull==false).ToString().ToLower());
    }
    else if(column.DataType==DbType.String||column.DataType==DbType.AnsiString)
    {
		if(StringUtil.ToPascalCase(column.Name)=="SupCode")
		{
			sb.AppendFormat("<input id=\"Control_SupCode\" name=\"SupCode\" class=\"mini-combobox\" onvaluechanged=\"supCodeChanged\" valuefield=\"Id\" textfield=\"SupName\" pinyinfield=\"PyCode\" url=\"/Data/FbSupplierArchives.js\" allowinput=\"true\" style=\"width: 100%;\" />");
		}
        else if(column.Name.ToLower().StartsWith("if_"))
        {
            sb.AppendFormat("<div id=\"Control_{0}\" name=\"{0}\" value=\"@Model.{0}\" class=\"mini-checkbox\" trueValue=\"1\" falseValue=\"0\" readOnly=\"false\" text=\"{1}\"></div>",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r').Replace("是否",""));
        }
        else
        {
            sb.Append("<input type=\"text\"  value=\"@Model."+StringUtil.ToPascalCase(column.Name)+"\" class=\"mini-textbox\" name=\""+StringUtil.ToPascalCase(column.Name)+"\" id=\"Control_"+StringUtil.ToPascalCase(column.Name)+"\" ");
            if(column.Size>-1)
            {
                sb.Append("vtype=\"maxLength:"+ column.Size +"\"");
            }
            if(column.AllowDBNull==false)
            {
                sb.Append("required=\"true\"");   
            }
            
            sb.Append(" />");
        }
    }
    else if(column.DataType==DbType.Boolean)
    {
        sb.AppendFormat("<div id=\"Control_{0}\" name=\"{0}\" class=\"mini-checkbox\" checked=\"true\" readOnly=\"false\" text=\"{1}\"></div>",StringUtil.ToPascalCase(column.Name),column.Description.Trim('\n').Trim('\r'));
    }  
    else if(column.DataType==DbType.DateTime || column.DataType==DbType.DateTime2)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" name=\"{0}\"  value=\"@Model.{0}\" class=\"mini-datepicker\"  format=\"yyyy-MM-dd H:mm:ss\" timeFormat=\"H:mm:ss\" showTime=\"true\" showOkButton=\"true\" showClearButton=\"true\" required=\"{1}\" />",StringUtil.ToPascalCase(column.Name),(column.AllowDBNull==false).ToString().ToLower());
    }
    else if(column.DataType==DbType.Int16 || column.DataType==DbType.Int32||column.DataType==DbType.Int64)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" name=\"{0}\"  value=\"@Model.{0}\" class=\"mini-spinner\" minValue=\"0\" maxValue=\"999999\" decimalPlaces=\"0\"/>",StringUtil.ToPascalCase(column.Name));
    }
    else if(column.DataType==DbType.Decimal)
    {
        sb.AppendFormat("<input type=\"text\" id=\"Control_{0}\" name=\"{0}\"  value=\"@Model.{0}\" class=\"mini-spinner\" minValue=\"0\" maxValue=\"999999\" decimalPlaces=\"{1}\"/>",StringUtil.ToPascalCase(column.Name),column.Scale);
    }
    else
    {
        sb.Append("ERROR TYPE:"+column.DataType);
    }
    sb.AppendLine("\n            </div>");
    return sb.ToString();
}

private string GetGridColumn(ColumnSchema column){
	StringBuilder sb=new StringBuilder();
	sb.AppendFormat("<div field=\"{0}\" headeralign=\"center\" align=\"center\" width=\"60\">\n",StringUtil.ToPascalCase(column.Name));
	sb.AppendFormat("					    {0}\n",column.Description);
	if(column.DataType==DbType.String||column.DataType==DbType.AnsiString){
		sb.Append("					");
		if(StringUtil.ToPascalCase(column.Name)=="GoodsCode"){
			sb.AppendLine("<div id=\"editor_GoodsCode\" popupwidth=\"400\" name=\"GoodsCode\" property=\"editor\" class=\"mini-combobox\" allowinput=\"true\" valuefield=\"Id\" textfield=\"GoodsName\" onvaluechanged=\"onGoodsChanged\" url=\"/Fb/SearchFbGoodsArchivesListForList\" style=\"width: 100%;\">\n                        <div property=\"columns\">                            \n<div header=\"销售码\" field=\"GoodsBarCode\">\n                            </div>\n                            <div header=\"拼音码\" field=\"PyCode\">\n                            </div>\n                            <div header=\"商品名称\" field=\"GoodsName\">\n                            </div>\n                        </div>\n                    </div>\n");
		}
		else if(column.Name.ToLower().StartsWith("if_"))
        {
			sb.AppendFormat("<div id=\"editor_{0}\" name=\"{0}\"  property=\"editor\" class=\"mini-checkbox\" trueValue=\"1\" falseValue=\"0\" readOnly=\"false\" text=\"\"></div>\n",StringUtil.ToPascalCase(column.Name));
		}
		
		else{
			sb.AppendFormat("<input id=\"editor_{0}\" name=\"{0}\" property=\"editor\" class=\"mini-textbox\" style=\"width:100%;\" />\n",StringUtil.ToPascalCase(column.Name));
		}
	}
	else if(column.DataType==DbType.DateTime || column.DataType==DbType.DateTime2)
	{
		sb.AppendFormat("<input type=\"text\" id=\"editor_{0}\" name=\"{0}\" property=\"editor\"  class=\"mini-datepicker\"  format=\"yyyy-MM-dd H:mm:ss\" timeFormat=\"H:mm:ss\" showTime=\"true\" showOkButton=\"true\" showClearButton=\"true\" required=\"{1}\" style=\"width: 100%;\" />\n",StringUtil.ToPascalCase(column.Name),(column.AllowDBNull==false).ToString().ToLower());
	}
	else if(column.DataType==DbType.Int16 || column.DataType==DbType.Int32||column.DataType==DbType.Int64)
	{
		sb.AppendFormat("<input type=\"text\" id=\"editor_{0}\" name=\"{0}\" property=\"editor\" class=\"mini-spinner\" minValue=\"0\" maxValue=\"1000\" decimalPlaces=\"0\" style=\"width: 100%;\"/>\n",StringUtil.ToPascalCase(column.Name));
	}
	else if(column.DataType==DbType.Decimal)
	{
		sb.AppendFormat("<input type=\"text\" id=\"editor_{0}\" name=\"{0}\" property=\"editor\"  class=\"mini-spinner\" minValue=\"0\" maxValue=\"1000\" decimalPlaces=\"{1}\" style=\"width: 100%;\"/>\n",StringUtil.ToPascalCase(column.Name),column.Scale);
	}
	else{
		sb.AppendLine("Unknown data type\n");
	}
	
	sb.AppendLine("					</div>\n");
	return sb.ToString();
}

public bool TableHasIdentityColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if((bool)column.ExtendedProperties["CS_IsIdentity"].Value==true)
		{
			return true;
		}
	}
	return false;
}
public ColumnSchema GetTableIdentityColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		try
		{
			if((bool)column.ExtendedProperties["CS_IsIdentity"].Value==true)
			{
				return column;
			}
		}
		catch{}
	}
	throw new Exception("no IdentityColumn");
}
public bool TableExistPk(SchemaExplorer.TableSchema table)
{
	return table.HasPrimaryKey;
}
public ColumnSchema GetTablePkColumn(SchemaExplorer.TableSchema table)
{
	foreach(ColumnSchema column in table.Columns)
	{
		if(column.IsPrimaryKeyMember)
		{
			return column;
		}
	}
	return null;
}
public ColumnSchema GetPkOrIdentityColumn(SchemaExplorer.TableSchema table)
{
	if(TableExistPk(table))
	{
		return GetTablePkColumn(table);
	}
	if(TableHasIdentityColumn(table))
	{
		return GetTableIdentityColumn(table);
	}
	throw new Exception("No Pk");
}
public bool IsIdentityOrPkColumn(ColumnSchema column)
{
	return (bool)column.ExtendedProperties["CS_IsIdentity"].Value==true || column.IsPrimaryKeyMember;
}
</script>